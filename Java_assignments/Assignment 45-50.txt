Q. 46

class Person{
	void getDetails()
	{
		System.out.println("Person's Details");
	}
	void getJob(){
		System.out.println("Person's Job");
	}
}

class Employee extends Person{
	void getJob(){
		System.out.println("Employee's Job");
	}
	void getDept(){
		System.out.println("Employee's Department");
	}
}

class Q46{
	public static void main(String args[]){
		Person ar[] = {new Employee(),new Person()};
		for(Person a :ar){
			if(a instanceof Employee){
				Employee e = (Employee)a;//down casting 
				e.getDept();
			}
		}
	}
}


Q. 47

import java.util.Scanner;

class Abc{
	Abc()
	{
		System.out.println("No-arg Constructor");
	}
	Abc(int i)
	{
		System.out.println("Para Constructor");
	}
}

class Pqr extends Abc{
	Pqr()
	{
		System.out.println("No-arg Constructor Pqr");
	}
	Pqr(int i)
	{
		System.out.println("Para Constructor Pqr");
	}
	
}

class Q47{
	public static void main(String args[]){
		Pqr p = new Pqr();
	}

}

48.Create an Abstract class Processor with int member variable data  and method showData to display data value. Create abstract method process() to define processing of member data. Create a class  Factorial using abstract class Processor  to calculate and print factorial of a number by overriding the process method. b. Create a class Circle using abstract class Processor to calculate and print area of a circle by overriding the process method.Ask user to enter choice (factorial or circle area).  Also ask data to work upon. Use Processor class reference to achieve this mechanism.


import java.util.Scanner;
abstract class Processor {
    double data;

    void showdata(){
     System.out.println(data);
    }

    abstract void process();
}

class factorial extends Processor{
   void process(){
        int n =5;
       int sum=1;
        for(int i= 1; i<=n; i++){
            sum = sum *i;
        }
        data = sum;
   }
}	
class circle extends Processor{
    void process(){
        int r=5;
        double area;
        area = 3.14f * r * r;
        data = area;
    }
}
class Q48{
public static void main(String args[]){
    Processor p = new factorial();
    Processor p1 = new circle();
      p.process();
      p1.process();
      p.showdata();
      p1.showdata();
}}

-----------------------------------------------
//49.Create Interface Taxable with members salesTax=7% and incomeTax=10.5%. create abstract method calcTax(). a. Create class Employee(empId,name,salary) and implement Taxable to calculate incomeTax on yearly salary. b. Create class Product(pid,price,quantity) and implement Taxable to calculate salesTax on unit price of product. c. Create class for main method(Say XYZ), accept employee information and a product information from user and print income tax and sales tax respectively.
import java.util.Scanner;

interface taxable{
    double salesTax = 0.07;
    double incomeTax = 0.10;

   void calcTax();
}

class Employee implements taxable{
        int empid;
        int salary;
        String name;
        Employee() {}

        Employee( int empid,int salary,  String name  ){
            this.empid = empid;
            this.salary=salary;
            this.name=name;
        }

      public void calcTax(){
             double incomeTax1 = salary * incomeTax ;
             System.out.println("Total incometax is "+incomeTax1);
             }

}

class product implements taxable{
    int pid;
    int price;
    int quantity;
    product() {}

    product( int pid, int price,  int quantity  ){
        this.pid = pid;
        this.price=price;
        this.quantity=quantity;
    }

  public void calcTax(){
         double saleTax1 = ( price * quantity ) * salesTax ;
         System.out.println("Total saletax is "+saleTax1);
         }

}

class Q49{
public static void main(String args[]){
    taxable t = new Employee(1 , 15000, "jack");
    taxable t1 = new product(1 , 400, 5);
    t.calcTax();
    t1.calcTax();
}}

Q50. Explain the importance of toString() and equals() method of the Object class and override them on class Employee(empId,name,salary).  a. Create class for main method(say XYZ),and accept five employees information and store in an array. Also ensure if entered empId already exist or not (use equals method).  b. Display all employee info using toString method.

//package a1;

import java.util.Scanner;

class Employee{
	int empId;
	String empName;
	Double salary;
	Employee(int empId,String empName,Double salary){
		this.empId=empId;
		this.empName=empName;
		this.salary=salary;
	}
	@Override
	public String toString() {
		return "Employee"+ empId + " empName=" + empName + " salary=" + salary ;
	}
	int getid() {
		return empId;
	}
}
public class Q50 {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		Employee arr[]=new Employee[4];
		int count=0;
		outer:
		for(int i=0;i<arr.length;) {
		//outer:
			System.out.println("Enter Employee Id,name, salary");
		int eid=sc.nextInt();
		//sc.Next();
		String name1=sc.next();
		double sal=sc.nextDouble();
			for(int j=0;j<count;j++) {
				int k=arr[j].getid();
		        if(k==eid) {
		        	System.out.println("These Employee id already exist:");
		        	continue outer;
		        }
			}
		Employee e1=new Employee(eid,name1,sal);
		
		arr[i]=e1;
		count++;
		i++;
		}
		for(Employee e: arr) {
			System.out.println(e.toString());
		}
	}

}
